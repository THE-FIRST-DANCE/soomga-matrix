name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1.6.1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id : login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set global env vars
      run: |
        echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
        echo "ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}" >> $GITHUB_ENV
        echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

    - name: Set image env var
      run: echo "IMAGE=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and push
      uses: docker/build-push-action@v2 # 
      with:
        context: .
        push: true
        tags: ${{ env.IMAGE }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: setting-task-definition
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ops/task-definition.json
        container-name: ${{ secrets.ECS_CONTAINER_NAME }}
        image: ${{ env.IMAGE }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.setting-task-definition.outputs.task-definition }}
        service: ${{ secrets.ECS_SERVICE }}
        cluster: ${{ secrets.ECS_CLUSTER }}
        wait-for-service-stability: false
